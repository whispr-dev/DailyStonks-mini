import textwrap
from pathlib import Path

# Create a simple yet elegant Python CLI stonk plotter script
script_code = textwrap.dedent("""\
    #!/usr/bin/env python3
    \"\"\"
    stonkplot.py â€“ Simple CLI stock plotter with optional AI trend line

    Usage:
        python stonkplot.py AAPL
        python stonkplot.py TSLA --forecast
    \"\"\"

    import argparse
    import datetime
    import matplotlib.pyplot as plt
    import numpy as np
    import yfinance as yf
    from sklearn.linear_model import Ridge

    def fetch_data(ticker, days=60):
        end = datetime.datetime.now()
        start = end - datetime.timedelta(days=days)
        df = yf.download(ticker, start=start.strftime('%Y-%m-%d'), end=end.strftime('%Y-%m-%d'))
        return df['Close']

    def forecast_trend(prices, forecast_days=5):
        X = np.arange(len(prices)).reshape(-1, 1)
        y = prices.values
        model = Ridge(alpha=1.0)
        model.fit(X, y)

        future_X = np.arange(len(prices) + forecast_days).reshape(-1, 1)
        predicted = model.predict(future_X)
        return predicted

    def plot_stonk(ticker, show_forecast=False):
        prices = fetch_data(ticker)
        plt.figure(figsize=(10, 5))
        plt.plot(prices.index, prices.values, label=f"{ticker} Close", linewidth=2)

        if show_forecast:
            pred = forecast_trend(prices)
            future_dates = [prices.index[0] + datetime.timedelta(days=i) for i in range(len(pred))]
            plt.plot(future_dates, pred, linestyle='--', color='orange', label="AI Forecast")

        plt.title(f"{ticker} Price Chart {'+ Forecast' if show_forecast else ''}")
        plt.xlabel("Date")
        plt.ylabel("Price (USD)")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.show()

    def main():
        parser = argparse.ArgumentParser(description="Plot historical stock prices with optional AI forecast.")
        parser.add_argument("ticker", help="Stock ticker symbol (e.g. AAPL, TSLA)")
        parser.add_argument("--forecast", action="store_true", help="Include AI-based price trend forecast")
        args = parser.parse_args()

        plot_stonk(args.ticker.upper(), show_forecast=args.forecast)

    if __name__ == "__main__":
        main()
""")

# Write the script to a file
script_path = Path("/mnt/data/stonkplot.py")
script_path.write_text(script_code)

script_path.name  # Show filename to user
